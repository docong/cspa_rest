// Generated by CoffeeScript 1.6.3
(function() {
  var Job, Service, child_process, fs, mkdirp, path, restify, server, svc, timestamp, whiskers, yaml;

  fs = require("fs");

  path = require("path");

  mkdirp = require("mkdirp");

  whiskers = require("whiskers");

  restify = require("restify");

  child_process = require("child_process");

  yaml = require("yamljs");

  timestamp = function() {
    var d;
    d = new Date();
    return d.toISOString();
  };

  Service = (function() {
    function Service(definition) {
      var _base;
      this.svc = require(definition);
      this.name = this.svc.name;
      this.basepath = path.dirname(definition);
      this.job_path = "" + this.basepath + "/job";
      if ((_base = this.svc).version == null) {
        _base.version = "0.0.0";
      }
      this.counter = this.init_counter();
      this.jobs = {};
      this.def = JSON.stringify(this.svc);
    }

    Service.prototype.add_to = function(server) {
      this.server = server;
      server.post("/" + this.name, this.POST_job);
      server.post("/" + this.name + "/job", this.POST_job);
      server.get('/#{@name}/job/:id', this.GET_job);
      return console.log("Added service: " + this.name);
    };

    Service.prototype.create_job = function(name, input, on_end) {
      var ctxt, id, job, key, svc, value, wd, _ref, _ref1;
      if (on_end == null) {
        on_end = null;
      }
      if (this.url == null) {
        this.url = "" + this.server.url + "/" + this.name;
      }
      this.counter += 1;
      id = this.counter;
      job = new Job(id, "" + this.url + "/job/" + id, name, this.svc.version, input, {}, on_end);
      this.jobs[job.id] = job;
      ctxt = {};
      _ref = this.svc;
      for (key in _ref) {
        value = _ref[key];
        ctxt[key] = value;
      }
      ctxt.job = job;
      ctxt.service = this;
      svc = JSON.parse(whiskers.render(this.def, ctxt));
      _ref1 = svc.result;
      for (key in _ref1) {
        value = _ref1[key];
        job.result[key] = value.url;
      }
      job.command = svc.command;
      wd = this.job_path;
      mkdirp.sync("" + this.job_path + "/" + job.id);
      job.save(this.job_path);
      return this.run_job(job);
    };

    Service.prototype.run_job = function(job) {
      job.status = "running";
      job.started = timestamp();
      job.save(this.job_path);
      return child_process.exec(job.command, {
        cwd: "" + this.basepath
      }, function(error, stdout, stderr) {
        if (error) {
          console.log(error);
          job.status = "error";
        } else {
          job.status = "finished";
        }
        return job.save(this.job_path);
      });
    };

    Service.prototype.init_counter = function() {
      return 0;
    };

    Service.prototype.POST_job = function(req, res, next) {
      var job;
      if (req.is("json")) {
        job = req.body;
        job = this.create_job(job.name, job.input, job.on_end);
        res.status(201);
        res.header("Location", job.url);
        res.send(job);
      }
      return next();
    };

    Service.prototype.GET_job = function(req, res, next) {
      var id, job;
      id = req.param.id;
      job = this.jobs[id];
      if (!!job) {
        res.status(200);
      }
      res.send(job);
      return next();
    };

    Service.prototype.GET_job_result = function(req, res, next) {};

    return Service;

  })();

  Job = (function() {
    function Job(id, url, name, version, input, result, on_end) {
      this.id = id;
      this.url = url;
      this.name = name;
      this.version = version;
      this.input = input;
      this.result = result;
      this.on_end = on_end != null ? on_end : null;
      this.created = timestamp();
      this.started = null;
      this.ended = null;
      this.status = "created";
    }

    Job.prototype.save = function(job_path) {
      var json_path;
      json_path = "" + job_path + "/" + this.id + "/job.json";
      return fs.writeFileSync(json_path, JSON.stringify(this, null, 2));
    };

    return Job;

  })();

  exports.Service = Service;

  if (typeof test !== "undefined" && test !== null) {
    svc = new Service("../LRC/service.yaml");
    server = restify.createServer();
    server.pre(restify.pre.userAgentConnection());
    server.use(restify.bodyParser());
    svc.add_to(server);
    svc.create_job("bla", {
      data: "d",
      rules: "r"
    });
    svc.create_job("bla2", {
      data: "d",
      rules: "r"
    });
  }

}).call(this);
