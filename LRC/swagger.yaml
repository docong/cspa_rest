swagger: 2
info:
  title: LRC API
  description: Linear Rule Checking for data
  version: "0.1.0"
# the domain of the service
# host: api.uber.com
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
  - text/csv
consumes:
  - application/json
  - text/csv
paths:
  /LRC/job:
    post:
      summary: Create a LRC request
      description: Create a LRC request
      parameters:
        - name: body
          in: body
          description: |
            Create a LRC job supplying the input 
            parameters
          schema: 
            name: 
              type: string
            input:
              $ref: Input
      responses:
        200:
          description: Newly created job
          schema:
            $ref: Job
    get:
      summary: LRC jobs
      description: The Jobs endpoint returns information about all jobs that have been submitted.
      responses:
        200:
          description: List of jobs
          schema:
            type: array
            $items: Job
  /LRC/job/{id}:
    get:
      summary: Get LRC Job info
      description: Return the status and information on a LRC job.
      parameters:
        - name: id
          in: path
          description: id of job
          required: true
          type: string
      tags: 
        - LRC
      responses:  
        200:
          description: Job description
          schema:
            $ref: Job
        default:
          description: Unexpected error
          schema:
            $ref: Error
  /LRC/job/{id}/result/checks/data:
    get:
      summary: get data result.
      description: get data result.
      parameters:
        - name: id
          in: path
          description: id of job
          required: true
          type: string
      responses:
        200:
          description: csv data
          schema:
            type: file
  /LRC/job/{id}/result/checks/schema:
    get:
      summary: get data result structure.
      description: get data result structure.
      parameters:
        - name: id
          in: path
          description: id of job
          required: true
          type: string
      responses:
        200:
          description: json table schema
          schema:
            type: file
  /LRC/job/{id}/result/log:
    get:
      summary: get logging information of job.
      description: get logging information of job.
      parameters:
        - name: id
          in: path
          description: id of job
          required: true
          type: string
      responses:
        200:
          description: text file with logging information.
          schema:
            type: file
definitions:
  Job:
    properties:
      id: 
        type: string
        required: yes 
      name:
        type: string
        required: yes
      status:
        type: string
      created:
        type: string
        format: date-time
      url:
        type: string
        format: url
      input:
        type: Input
        description: "input parameters" 
        $ref: Input
      result:
        type: Result
        $ref: Result
      started:
        type: string
        format: date-time
      ended:
        type: string
        format: date-time
  DataSet:
    properties:
      data: 
        type: file
        description: csv data file
      schema:
        type: file
        description: |
          *json table schema* describing the data structure of the *csv* data.
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  Input:
    properties:
      data:
        type: DataSet
        description: Data to be checked.
        required: yes
        $ref: DataSet
      rules:
        type: string
        format: url
        description: file with linear rules
        required: yes
  Result:
    properties:
      checks:
        type: DataSet
        $ref: DataSet
